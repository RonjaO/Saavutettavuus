        <h1 id="main">3. Syvemmälle saavutettavuuteen: JavaScript, HTML ja CSS</h1>

        <h2>Materiaali</h2>

        <h3>Dynaaminen sisältö</h3>

        <p>Dynaamisen sisällön kanssa toimiminen ei ole apuvälineille mikään helpoin tehtävä. Kesken kaiken muuttuva DOM on haaste esimerkiksi ruudunlukuohjelmille. Mutta ei hätää! Dynaamisen sisällön pystyy tekemään myös saavutettavasti.</p>

        <p>Yksi tärkeimmistä asioista sivun sisällön muuttuessa on fokuksen siirto: siten voi pakottaa ruudunlukuohjelman käyttäjän fokuksen haluttuun kohtaan. Tätä tosin ei tulisi käyttää kuin niissä tilanteissa, jolloin käyttäjä osaa odottaa sijaintinsa muuttuvan, siis jonkin käyttäjän oman toiminnon jälkeen. Jos sivulla on vaihtuva mainos, sinne ei missään tapauksessa tulisi pakottaa fokusta. Sitten taas, jos lomakkeen lähettäminen aiheuttaakin esimerkiksi virheilmoituksen, on hyvä siirtää käyttäjän fokus ko. ilmoituksen kohdalle, jottei se jää huomaamatta. Tai jos linkkiä painamalla sisältö muuttuu, voi fokuksen siirtää muuttuvan sisällön alkuun.</p>

        <script async src="//jsfiddle.net/6wfwb4sd/8/embed/"></script>

        <p>JavaScriptin avulla voi lisätä toiminnallisuutta vähän mihin tahansa elementteihin, niihinkin, jotka eivät sitä semanttisesti sisällä. Tässä kohtaa suureksi avuksi tulee ARIA, josta lisää seuraavassa.</p>

        <h3>ARIA-attribuutit</h3>

        <p> ARIA (Accessible Rich Internet Application) on valikoima attribuutteja, joiden avulla verkkosivusta saa tehtyä saavutettavamman apuvälineille. Uusimmat selaimet ja ruudunlukuohjelmat tukevat hyvin ARIA-attribuutteja, mutta vanhat välttämättä eivät. ARIA:n avulla saa tehtyä paljon nppäriä asioita ja niiden avulla pystyy mm. korjaamaan ruudunlukuohjelman käyttäjän näkökulmasta sivun semantiikkaa oikeaksi. Silti ensisijaisesti tulisi noudattaa perus HTML-semantiikkaa, jotta vanhemmatkin ruudunlukijat ymmärtävät sisällön oikein.</p>

        <p>ARIA-attribuutin voi lisätä lähes jokaiselle html-elementille. ARIA:an sisältyy <b>role</b>-attribuutti sekä joukko erilaisia <b>aria-*</b> -attribuutteja. Role-attribuutti kertoo nimensä mukaisesti elementin roolin, esimerkiksi "main", "button", "menubar" jne – vaihtoehtoja on toista sataa. Aria-* -attribuuteilla voi taas lisätä elementille vaikka kuvauksen (aria-describedby=id), labelin (aria-label="tekstiä") tai sen voi piilottaa ruudunlukuohjelmalta (aria-hidden=true/false).</p>

        <p>ARIA-attribuutit lisäävät saavutettavuutta etenkin dynaamisen sisällön kanssa – niiden avulla on mahdollista antaa ruudunlukuohjelman käyttäjälle tietoa muuttuneesta sisällöstä heti, kun se muuttuu, sekä muista sovelluksessa tapahtuvista asioista. ARIA:sta on hyötyä myös ilman JavaScriptiä ja dynaamisyyttä.</p>

        <h4>Hyödyllisiä aria-* -attribuutteja</h4>

        <table>
            <tr><th>attributti</th> <th>Arvo</th> <th>Kuvaus</th> <th>Esimerkki</th></tr>
            <tr>
                <td>aria-checked</td> <td>true/false</td> <td>Kertoo, onko elementin tila "valittu" vai ei</td> <td>Lomakkeissa, joissa käytetään valittavina elementteinä jotain muuta kuin input-elementtiä relevantilla typellä</td>
            </tr>
            <tr>
                <td>aria-describedby</td> <td>id</td> <td>Lisäkuvaus elementin toiminnalle</td> <td>Lomakekentässä "tooltip", salasanan muoto</td> 
            </tr>
            <tr>
                <td>aria-hidden</td> <td>true/false</td> <td>Piilottaa elementin ruudunlukuohjelmalta</td> <td> </td>
            </tr>
            <tr>
                <td>aria-label</td> <td>tekstiä</td> <td>Kertoo ruudunlukuohjelmalle halutun asian elementistä</td> <td>Lue lisää -linkkiin tieto, mistä voi lukea lisää</td>
            </tr>
            <tr>
                <td>aria-labelledby</td> <td>id1 id2 ...</td> <td>Lista elementille annettavista labeleista</td> <td>Lomake-elementti, jolla labelina sekä "oma" label että ryhmän label.</td>
            <tr>
                <td>aria-required</td> <td>true/false</td> <td>Kertoo lomake-elementin pakollisuudesta</td> <td> </td>
            <tr>
                <td>aria-level</td> <td>numero</td> <td>Ilmaisee elementin hierarkiaa</td> <td>Apuna esimerkiksi puurakenteen ja "alilistojen" ymmärtämisessä</td>
            </tr>
            <tr>
                <td>aria-setsize</td> <td>numero</td> <td>Elementin, esimerkiksi listan tai puun, koko</td> <td> </td>
            </tr>
        </table>

        <script async src="//jsfiddle.net/hvo6sm2u/embed/"></script>

        <h4>Tarpeellisia role-attribuutin arvoja</h4>

        <p>Kaikki seuraavat ovat muotoa role="arvo".</p>

        <table aria-label="Aria rolet">
            <tr><th>Arvo</th> <th>Kuvaus</th></tr>
            <tr>
                <td>alert</td><td>Ruudulle ilmestyvä ilmoitusteksti, joka halutaan tulevan varmasti luetuksi</td>
            </tr>
            <tr>
                <td>button</td><td>Jos jokin muu kuin varsinainen button-elementti toimii kuin button, tämä role auttaa</td>
            </tr>
            <tr>
                <td>main</td><td>Sivun pääsisältö. Helpottaa ruudunlukuohjelmalla navigointia.</td>
            </tr>
            <tr>
                <td>menubar</td> <td>Kertoo elementin olevan valikko.</td>
            </tr>
            <tr>
                <td>menuitem</td><td>Kertoo, että elementti on valikon kohde.</td>
            </tr>
            <tr>
                <td>presentation</td><td>Ottaa elementiltä sen semantiikan pois. Esim taulukkoa ei lueta enää taulukkona.</td>
            </tr>
            <tr>
                <td>radiobuttongroup</td><td>Elementti on valikoima radiobuttoneita.</td>
            </tr>
            <tr>
                <td>menuitemradio</td><td>Elementti, joka on radiobuttongroup-alueen yksi kohde.</td>
            </tr>
            <tr>
                <td>tabpanel</td><td>Tabien valintapaneeli</td>
            </tr>
            <tr>
                <td>tab</td><td>Tabien valintapaneelin yksi valittava tabi.</td>
             </tr>
        </table>

        <p>Erilaisia roleja on vielä ehkä noin 100 lisää.</p>

        <script async src="//jsfiddle.net/qq2ccfn7/embed/"></script>

        <h3>CSS ja saavutettavuus</h3>


        <h2>Tehtävät</h2>

        <h3>1. Viestilista</h3>

        <p><a href="https://jsfiddle.net/sLaw9f7a/">Viestilista</a> näyttää viestin sisällön, kun klikkaa sitä listasta. Valitettavasti viestilistan elementit ovat vain li-elementtejä, joten ruudunlukuohjelmalle niiden klikattavuus ei ole itsestäänselvää. Tee ARIA:n avulla li-elementeistä ruudunlukuohjelman näkökulmasta painikkeita.</p>

        <h3>2. Valintalista</h3>

        <p><a href="https://jsfiddle.net/bdewm9ec/">Listassa</a> on vaihtoehtoja, joista voi valita vain yhden. Valitettavasti ruudunlukuohjelman käyttäjälle valinnat ovat vain yksittäisiä sanoja ilman mitään tietoa siitä, että niitä voisi edes painaa, saati sitten mitään tietoa, mikä vaihtoehdoista on valittuna. Käytä apuna tarvittavia ARIA roleja ja propertyja, jotta tästä saa saavutettavan.</p>

        <h3>3. Verkkokaupan dropdown-menu</h3>
        <p>Edellisen luennon tehtävistä tuttu <a href="https://jsfiddle.net/tur36d0z/">Verkokauppa</a> on saanut navigaatioonsa "dropdown"-valikoita. Paha vaan, valikot tulee näkyviin pelkästään hiiren käyttäjille. :( Lisää sivulle JavaScript-koodia, jolla valikon saa näkyviin myös näppäimistöllä navigoidessa tai kosketusnäytöllä.</p>

        <h2>Linkkejä</h2>	

        <ul>
            <li><a href="http://w3c.github.io/aria-in-html/">W3C: Notes on using ARIA in HTML</a></li>
        </ul>

    </body>
</html>
